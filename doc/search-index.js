var searchIndex = {};
searchIndex['rblas'] = {"items":[[0,"","rblas",""],[10,"one","num::complex","",0],[10,"zero","","",0],[10,"one","","",0],[10,"zero","","",0],[0,"attribute","rblas",""],[2,"Order","rblas::attribute",""],[12,"RowMajor","","",1],[12,"ColMajor","","",1],[2,"Transpose","",""],[12,"NoTrans","","",2],[12,"Trans","","",2],[12,"ConjTrans","","",2],[2,"Symmetry","",""],[12,"Upper","","",3],[12,"Lower","","",3],[2,"Diagonal","",""],[12,"NonUnit","","",4],[12,"Unit","","",4],[2,"Side","",""],[12,"Left","","",5],[12,"Right","","",5],[0,"vector","rblas",""],[0,"ll","rblas::vector",""],[3,"cblas_scopy","rblas::vector::ll",""],[3,"cblas_dcopy","",""],[3,"cblas_ccopy","",""],[3,"cblas_zcopy","",""],[3,"cblas_saxpy","",""],[3,"cblas_daxpy","",""],[3,"cblas_caxpy","",""],[3,"cblas_zaxpy","",""],[3,"cblas_sscal","",""],[3,"cblas_dscal","",""],[3,"cblas_cscal","",""],[3,"cblas_zscal","",""],[3,"cblas_csscal","",""],[3,"cblas_zdscal","",""],[3,"cblas_sswap","",""],[3,"cblas_dswap","",""],[3,"cblas_cswap","",""],[3,"cblas_zswap","",""],[3,"cblas_sdsdot","",""],[3,"cblas_dsdot","",""],[3,"cblas_sdot","",""],[3,"cblas_ddot","",""],[3,"cblas_cdotu_sub","",""],[3,"cblas_zdotu_sub","",""],[3,"cblas_cdotc_sub","",""],[3,"cblas_zdotc_sub","",""],[3,"cblas_sasum","",""],[3,"cblas_dasum","",""],[3,"cblas_scasum","",""],[3,"cblas_dzasum","",""],[3,"cblas_snrm2","",""],[3,"cblas_dnrm2","",""],[3,"cblas_scnrm2","",""],[3,"cblas_dznrm2","",""],[3,"cblas_isamax","",""],[3,"cblas_idamax","",""],[3,"cblas_icamax","",""],[3,"cblas_izamax","",""],[3,"cblas_srot","",""],[3,"cblas_drot","",""],[3,"cblas_srotm","",""],[3,"cblas_drotm","",""],[3,"cblas_srotg","",""],[3,"cblas_drotg","",""],[3,"cblas_srotmg","",""],[3,"cblas_drotmg","",""],[0,"ops","rblas::vector",""],[6,"Copy","rblas::vector::ops",""],[9,"copy","","",6],[6,"Axpy","",""],[9,"axpy","","",7],[6,"Scal","",""],[9,"scal","","",8],[6,"Swap","",""],[9,"swap","","",9],[6,"Dot","",""],[9,"dot","","",10],[6,"Dotc","",""],[10,"dotc","","",11],[6,"Asum","",""],[9,"asum","","",12],[6,"Nrm2","",""],[9,"nrm2","","",13],[6,"Iamax","",""],[9,"iamax","","",14],[6,"Rot","",""],[9,"rot","","",15],[10,"copy","","",16],[10,"copy","","",17],[10,"axpy","","",16],[10,"axpy","","",17],[10,"scal","","",16],[10,"scal","","",17],[10,"swap","","",16],[10,"swap","","",17],[10,"dot","","",16],[10,"dot","","",17],[10,"dotc","","",16],[10,"dotc","","",17],[10,"asum","","",16],[10,"asum","","",17],[10,"nrm2","","",16],[10,"nrm2","","",17],[10,"iamax","","",16],[10,"iamax","","",17],[6,"Vector","rblas::vector",""],[9,"inc","","",18],[9,"len","","",18],[9,"as_ptr","","",18],[9,"as_mut_ptr","","",18],[6,"VectorOperations","",""],[10,"into_vec","","",19],[10,"update","","",19],[10,"scale","","",19],[10,"dot","","",19],[10,"abs_sum","","",19],[10,"norm","","",19],[10,"max_index","","",19],[10,"inc","collections::vec","",20],[10,"len","","",20],[10,"as_ptr","","",20],[10,"as_mut_ptr","","",20],[0,"matrix_vector","rblas",""],[0,"ll","rblas::matrix_vector",""],[3,"cblas_sgemv","rblas::matrix_vector::ll",""],[3,"cblas_dgemv","",""],[3,"cblas_cgemv","",""],[3,"cblas_zgemv","",""],[3,"cblas_ssymv","",""],[3,"cblas_dsymv","",""],[3,"cblas_csymv","",""],[3,"cblas_zsymv","",""],[3,"cblas_chemv","",""],[3,"cblas_zhemv","",""],[3,"cblas_strmv","",""],[3,"cblas_dtrmv","",""],[3,"cblas_ctrmv","",""],[3,"cblas_ztrmv","",""],[3,"cblas_strsv","",""],[3,"cblas_dtrsv","",""],[3,"cblas_ctrsv","",""],[3,"cblas_ztrsv","",""],[3,"cblas_sger","",""],[3,"cblas_dger","",""],[3,"cblas_cgeru","",""],[3,"cblas_zgeru","",""],[3,"cblas_cgerc","",""],[3,"cblas_zgerc","",""],[3,"cblas_cher","",""],[3,"cblas_zher","",""],[3,"cblas_ssyr","",""],[3,"cblas_dsyr","",""],[3,"cblas_cher2","",""],[3,"cblas_zher2","",""],[3,"cblas_ssyr2","",""],[3,"cblas_dsyr2","",""],[3,"cblas_sgbmv","",""],[3,"cblas_dgbmv","",""],[3,"cblas_cgbmv","",""],[3,"cblas_zgbmv","",""],[3,"cblas_chbmv","",""],[3,"cblas_zhbmv","",""],[3,"cblas_ssbmv","",""],[3,"cblas_dsbmv","",""],[3,"cblas_stbmv","",""],[3,"cblas_dtbmv","",""],[3,"cblas_ctbmv","",""],[3,"cblas_ztbmv","",""],[3,"cblas_stbsv","",""],[3,"cblas_dtbsv","",""],[3,"cblas_ctbsv","",""],[3,"cblas_ztbsv","",""],[3,"cblas_chpmv","",""],[3,"cblas_zhpmv","",""],[3,"cblas_sspmv","",""],[3,"cblas_dspmv","",""],[3,"cblas_stpmv","",""],[3,"cblas_dtpmv","",""],[3,"cblas_ctpmv","",""],[3,"cblas_ztpmv","",""],[3,"cblas_stpsv","",""],[3,"cblas_dtpsv","",""],[3,"cblas_ctpsv","",""],[3,"cblas_ztpsv","",""],[3,"cblas_chpr","",""],[3,"cblas_zhpr","",""],[3,"cblas_sspr","",""],[3,"cblas_dspr","",""],[3,"cblas_chpr2","",""],[3,"cblas_zhpr2","",""],[3,"cblas_sspr2","",""],[3,"cblas_dspr2","",""],[0,"ops","rblas::matrix_vector",""],[6,"Gemv","rblas::matrix_vector::ops",""],[9,"gemv","","",21],[6,"Symv","",""],[9,"symv","","",22],[6,"Hemv","",""],[9,"hemv","","",23],[6,"Ger","",""],[9,"ger","","",24],[6,"Gerc","",""],[10,"gerc","","",25],[6,"Syr","",""],[9,"syr","","",26],[6,"Her","",""],[9,"her","","",27],[6,"Syr2","",""],[9,"syr2","","",28],[6,"Her2","",""],[9,"her2","","",29],[6,"Gbmv","",""],[9,"gbmv","","",30],[6,"Sbmv","",""],[9,"sbmv","","",31],[6,"Hbmv","",""],[9,"hbmv","","",32],[6,"Tbmv","",""],[9,"tbmv","","",33],[6,"Tbsv","",""],[9,"tbsv","","",34],[6,"Spmv","",""],[9,"spmv","","",35],[6,"Hpmv","",""],[9,"hpmv","","",36],[6,"Tpmv","",""],[9,"tpmv","","",37],[6,"Tpsv","",""],[9,"tpsv","","",38],[6,"Hpr","",""],[9,"hpr","","",39],[6,"Spr","",""],[9,"spr","","",40],[6,"Spr2","",""],[9,"spr2","","",41],[6,"Hpr2","",""],[9,"hpr2","","",42],[10,"gemv","","",16],[10,"gemv","","",17],[10,"symv","","",16],[10,"symv","","",17],[10,"hemv","","",16],[10,"hemv","","",17],[10,"ger","","",16],[10,"ger","","",17],[10,"gerc","","",16],[10,"gerc","","",17],[10,"her2","","",16],[10,"her2","","",17],[10,"gbmv","","",16],[10,"gbmv","","",17],[10,"hbmv","","",16],[10,"hbmv","","",17],[10,"tbmv","","",16],[10,"tbmv","","",17],[10,"tbsv","","",16],[10,"tbsv","","",17],[10,"hpmv","","",16],[10,"hpmv","","",17],[10,"tpmv","","",16],[10,"tpmv","","",17],[10,"tpsv","","",16],[10,"tpsv","","",17],[10,"hpr2","","",16],[10,"hpr2","","",17],[0,"matrix","rblas",""],[0,"ll","rblas::matrix",""],[3,"cblas_sgemm","rblas::matrix::ll",""],[3,"cblas_dgemm","",""],[3,"cblas_cgemm","",""],[3,"cblas_zgemm","",""],[3,"cblas_ssymm","",""],[3,"cblas_dsymm","",""],[3,"cblas_csymm","",""],[3,"cblas_zsymm","",""],[3,"cblas_chemm","",""],[3,"cblas_zhemm","",""],[3,"cblas_strmm","",""],[3,"cblas_dtrmm","",""],[3,"cblas_ctrmm","",""],[3,"cblas_ztrmm","",""],[3,"cblas_strsm","",""],[3,"cblas_dtrsm","",""],[3,"cblas_ctrsm","",""],[3,"cblas_ztrsm","",""],[3,"cblas_cherk","",""],[3,"cblas_zherk","",""],[3,"cblas_cher2k","",""],[3,"cblas_zher2k","",""],[3,"cblas_ssyrk","",""],[3,"cblas_dsyrk","",""],[3,"cblas_csyrk","",""],[3,"cblas_zsyrk","",""],[3,"cblas_ssyr2k","",""],[3,"cblas_dsyr2k","",""],[3,"cblas_csyr2k","",""],[3,"cblas_zsyr2k","",""],[0,"ops","rblas::matrix",""],[6,"Gemm","rblas::matrix::ops",""],[9,"gemm","","",43],[6,"Symm","",""],[9,"symm","","",44],[6,"Hemm","",""],[9,"hemm","","",45],[6,"Trmm","",""],[9,"trmm","","",46],[6,"Trsm","",""],[9,"trsm","","",47],[6,"Herk","",""],[9,"herk","","",48],[6,"Her2k","",""],[9,"her2k","","",49],[6,"Syrk","",""],[9,"syrk","","",50],[6,"Syr2k","",""],[9,"syr2k","","",51],[10,"gemm","","",16],[10,"gemm","","",17],[10,"symm","","",16],[10,"symm","","",17],[10,"hemm","","",16],[10,"hemm","","",17],[10,"trmm","","",16],[10,"trmm","","",17],[10,"trsm","","",16],[10,"trsm","","",17],[10,"syrk","","",16],[10,"syr2k","","",16],[10,"syrk","","",17],[10,"syr2k","","",17],[6,"Matrix","rblas::matrix",""],[10,"lead_dim","","",52],[10,"order","","",52],[10,"transpose","","",52],[9,"rows","","",52],[9,"cols","","",52],[9,"as_ptr","","",52],[9,"as_mut_ptr","","",52],[6,"BandMatrix","",""],[9,"sub_diagonals","","",53],[9,"sup_diagonals","","",53]],"paths":[[1,"Complex"],[2,"Order"],[2,"Transpose"],[2,"Symmetry"],[2,"Diagonal"],[2,"Side"],[6,"Copy"],[6,"Axpy"],[6,"Scal"],[6,"Swap"],[6,"Dot"],[6,"Dotc"],[6,"Asum"],[6,"Nrm2"],[6,"Iamax"],[6,"Rot"],[4,"Complex32"],[4,"Complex64"],[6,"Vector"],[6,"VectorOperations"],[1,"Vec"],[6,"Gemv"],[6,"Symv"],[6,"Hemv"],[6,"Ger"],[6,"Gerc"],[6,"Syr"],[6,"Her"],[6,"Syr2"],[6,"Her2"],[6,"Gbmv"],[6,"Sbmv"],[6,"Hbmv"],[6,"Tbmv"],[6,"Tbsv"],[6,"Spmv"],[6,"Hpmv"],[6,"Tpmv"],[6,"Tpsv"],[6,"Hpr"],[6,"Spr"],[6,"Spr2"],[6,"Hpr2"],[6,"Gemm"],[6,"Symm"],[6,"Hemm"],[6,"Trmm"],[6,"Trsm"],[6,"Herk"],[6,"Her2k"],[6,"Syrk"],[6,"Syr2k"],[6,"Matrix"],[6,"BandMatrix"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics."],[3,"zero","","Returns the additive identity, `0`."],[3,"one","","Returns the multiplicative identity, `1`."],[3,"abs","","Computes the absolute value."],[3,"abs_sub","","The positive difference of two numbers."],[3,"signum","","Returns the sign of the number."],[3,"pow","","Raises a value to the power of exp, using exponentiation by squaring."],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`)."],[1,"BigUint","num::bigint","A big unsigned integer type."],[1,"BigInt","","A big signed integer type."],[2,"Sign","","A Sign is a `BigInt`'s composing element."],[12,"Minus","","",0],[12,"NoSign","","",0],[12,"Plus","","",0],[0,"BigDigit","",""],[3,"from_doublebigdigit","num::bigint::BigDigit","Split one `DoubleBigDigit` into two `BigDigit`s."],[3,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`"],[18,"BITS","",""],[18,"BASE","",""],[4,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element."],[4,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`."],[18,"ZERO_BIG_DIGIT","",""],[6,"ToBigUint","","A generic trait for converting a value to a `BigUint`."],[9,"to_biguint","","Converts the value of `self` to a `BigUint`.",1],[6,"ToBigInt","","A generic trait for converting a value to a `BigInt`."],[9,"to_bigint","","Converts the value of `self` to a `BigInt`.",2],[6,"RandBigInt","",""],[9,"gen_biguint","","Generate a random `BigUint` of the given bit size.",3],[9,"gen_bigint","","Generate a random BigInt of the given bit size.",3],[9,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",3],[9,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[9,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",3],[10,"decode","","",4],[10,"encode","","",4],[10,"clone","","",4],[10,"eq","","",4],[10,"partial_cmp","","",4],[10,"cmp","","",4],[10,"default","","",4],[10,"hash","","",4],[10,"fmt","","",4],[10,"from_str","","",4],[4,"Output","",""],[10,"bitand","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitand","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitxor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"bitxor","","",4],[4,"Output","",""],[4,"Output","",""],[10,"shl","","",4],[4,"Output","",""],[4,"Output","",""],[10,"shr","","",4],[4,"Output","",""],[10,"zero","","",4],[10,"is_zero","","",4],[10,"one","","",4],[4,"Output","",""],[10,"add","","",4],[4,"Output","",""],[4,"Output","",""],[10,"add","","",4],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",4],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",4],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",4],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",4],[4,"Output","",""],[4,"Output","",""],[10,"div","","",4],[4,"Output","",""],[4,"Output","",""],[10,"div","","",4],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",4],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",4],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",4],[4,"Output","",""],[10,"checked_add","","",4],[10,"checked_sub","","",4],[10,"checked_mul","","",4],[10,"checked_div","","",4],[10,"div_rem","","",4],[10,"div_floor","","",4],[10,"mod_floor","","",4],[10,"div_mod_floor","","",4],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",4],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",4],[10,"divides","","Deprecated, use `is_multiple_of` instead.",4],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",4],[10,"is_even","","Returns `true` if the number is divisible by `2`.",4],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",4],[10,"to_i64","","",4],[10,"to_u64","","",4],[10,"from_i64","","",4],[10,"from_u64","","",4],[10,"to_biguint","","",5],[10,"to_biguint","","",4],[10,"from_str_radix","","Creates and initializes a `BigUint`.",4],[10,"new","","Creates and initializes a `BigUint`.",4],[10,"from_slice","","Creates and initializes a `BigUint`.",4],[10,"parse_bytes","","Creates and initializes a `BigUint`.",4],[10,"bits","","Determines the fewest bits necessary to express the `BigUint`.",4],[10,"decode","","",0],[10,"encode","","",0],[10,"fmt","","",0],[10,"clone","","",0],[10,"cmp","","",0],[10,"partial_cmp","","",0],[10,"lt","","",0],[10,"le","","",0],[10,"gt","","",0],[10,"ge","","",0],[10,"eq","","",0],[10,"ne","","",0],[4,"Output","",""],[10,"neg","","Negate Sign value.",0],[10,"decode","","",5],[10,"encode","","",5],[10,"clone","","",5],[10,"eq","","",5],[10,"partial_cmp","","",5],[10,"cmp","","",5],[10,"default","","",5],[10,"fmt","","",5],[10,"hash","","",5],[10,"from_str","","",5],[4,"Output","",""],[10,"shl","","",5],[4,"Output","",""],[4,"Output","",""],[10,"shr","","",5],[4,"Output","",""],[10,"zero","","",5],[10,"is_zero","","",5],[10,"one","","",5],[10,"abs","","",5],[10,"abs_sub","","",5],[10,"signum","","",5],[10,"is_positive","","",5],[10,"is_negative","","",5],[4,"Output","",""],[10,"add","","",5],[4,"Output","",""],[4,"Output","",""],[10,"add","","",5],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",5],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",5],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",5],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",5],[4,"Output","",""],[4,"Output","",""],[10,"div","","",5],[4,"Output","",""],[4,"Output","",""],[10,"div","","",5],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",5],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",5],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",5],[4,"Output","",""],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[10,"div_rem","","",5],[10,"div_floor","","",5],[10,"mod_floor","","",5],[10,"div_mod_floor","","",5],[10,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5],[10,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5],[10,"divides","","Deprecated, use `is_multiple_of` instead.",5],[10,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5],[10,"is_even","","Returns `true` if the number is divisible by `2`.",5],[10,"is_odd","","Returns `true` if the number is not divisible by `2`.",5],[10,"to_i64","","",5],[10,"to_u64","","",5],[10,"from_i64","","",5],[10,"from_u64","","",5],[10,"to_bigint","","",5],[10,"to_bigint","","",4],[10,"from_str_radix","","Creates and initializes a BigInt.",5],[10,"new","","Creates and initializes a BigInt.",5],[10,"from_biguint","","Creates and initializes a `BigInt`.",5],[10,"from_slice","","Creates and initializes a `BigInt`.",5],[10,"parse_bytes","","Creates and initializes a `BigInt`.",5],[10,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",5],[10,"checked_add","","",5],[10,"checked_sub","","",5],[10,"checked_mul","","",5],[10,"checked_div","","",5],[0,"complex","num","Complex numbers."],[1,"Complex","num::complex","A complex number in Cartesian form."],[11,"re","","Real portion of the complex number",6],[11,"im","","Imaginary portion of the complex number",6],[4,"Complex32","",""],[4,"Complex64","",""],[10,"decode","","",6],[10,"encode","","",6],[10,"hash","","",6],[10,"clone","","",6],[10,"eq","","",6],[10,"ne","","",6],[10,"new","","Create a new Complex",6],[10,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",6],[10,"conj","","Returns the complex conjugate. i.e. `re - i im`",6],[10,"scale","","Multiplies `self` by the scalar `t`.",6],[10,"unscale","","Divides `self` by the scalar `t`.",6],[10,"inv","","Returns `1/self`",6],[10,"norm","","Calculate |self|",6],[10,"arg","","Calculate the principal Arg of self.",6],[10,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",6],[10,"from_polar","","Convert a polar representation into a complex number.",6],[4,"Output","",""],[10,"add","","",6],[4,"Output","",""],[4,"Output","",""],[10,"add","","",6],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",6],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",6],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",6],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",6],[4,"Output","",""],[4,"Output","",""],[10,"div","","",6],[4,"Output","",""],[4,"Output","",""],[10,"div","","",6],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",6],[4,"Output","",""],[10,"zero","","",6],[10,"is_zero","","",6],[10,"one","","",6],[10,"fmt","","",6],[0,"integer","num","Integer trait and functions."],[3,"div_rem","num::integer","Simultaneous integer division and modulus"],[3,"div_floor","","Floored integer division"],[3,"mod_floor","","Floored integer modulus"],[3,"div_mod_floor","","Simultaneous floored integer division and modulus"],[3,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive."],[3,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`."],[6,"Integer","",""],[9,"div_floor","","Floored integer division.",7],[9,"mod_floor","","Floored integer modulo, satisfying:",7],[9,"gcd","","Greatest Common Divisor (GCD).",7],[9,"lcm","","Lowest Common Multiple (LCM).",7],[9,"divides","","Deprecated, use `is_multiple_of` instead.",7],[9,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",7],[9,"is_even","","Returns `true` if the number is even.",7],[9,"is_odd","","Returns `true` if the number is odd.",7],[9,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",7],[10,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",7],[0,"iter","num","External iterators for generic mathematics"],[1,"Range","num::iter","An iterator over the range [start, stop)"],[1,"RangeInclusive","","An iterator over the range [start, stop]"],[1,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[1,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[3,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive))."],[3,"range_inclusive","","Return an iterator over the range [start, stop]"],[3,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping."],[3,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping."],[10,"clone","","",8],[4,"Item","",""],[10,"next","","",8],[10,"size_hint","","",8],[10,"next_back","","",8],[10,"clone","","",9],[4,"Item","",""],[10,"next","","",9],[10,"size_hint","","",9],[10,"next_back","","",9],[10,"clone","","",10],[4,"Item","",""],[10,"next","","",10],[10,"clone","","",11],[4,"Item","",""],[10,"next","","",11],[0,"traits","num","Numeric traits for generic mathematics"],[6,"Num","num::traits","The base trait for numeric types"],[6,"Zero","","Defines an additive identity element for `Self`."],[9,"zero","","Returns the additive identity element of `Self`, `0`.",12],[9,"is_zero","","Returns `true` if `self` is equal to the additive identity.",12],[6,"One","","Defines a multiplicative identity element for `Self`."],[9,"one","","Returns the multiplicative identity element of `Self`, `1`.",13],[6,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative)."],[9,"abs","","Computes the absolute value.",14],[9,"abs_sub","","The positive difference of two numbers.",14],[9,"signum","","Returns the sign of the number.",14],[9,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",14],[9,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",14],[6,"Unsigned","","A trait for values which cannot be negative"],[6,"Bounded","","Numbers which have upper and lower bounds"],[9,"min_value","","returns the smallest finite number this type can represent",15],[9,"max_value","","returns the largest finite number this type can represent",15],[6,"Saturating","","Saturating math operations"],[9,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",16],[9,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",16],[6,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on overflow."],[9,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is returned.",17],[6,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow."],[9,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens, `None` is returned.",18],[6,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow."],[9,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow or overflow\nhappens, `None` is returned.",19],[6,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow."],[9,"checked_div","","Divides two numbers, checking for underflow, overflow and division by zero. If any of that\nhappens, `None` is returned.",20],[0,"rational","num","Rational numbers"],[1,"Ratio","num::rational","Represents the ratio between 2 numbers."],[4,"Rational","","Alias for a `Ratio` of machine-sized integers."],[4,"Rational32","",""],[4,"Rational64","",""],[4,"BigRational","","Alias for arbitrary precision rationals."],[10,"decode","","",21],[10,"encode","","",21],[10,"hash","","",21],[10,"clone","","",21],[10,"from_integer","","Creates a ratio representing the integer `t`.",21],[10,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",21],[10,"new","","Create a new Ratio. Fails if `denom == 0`.",21],[10,"to_integer","","Converts to an integer.",21],[10,"numer","","Gets an immutable reference to the numerator.",21],[10,"denom","","Gets an immutable reference to the denominator.",21],[10,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",21],[10,"reduced","","Returns a `reduce`d copy of self.",21],[10,"recip","","Returns the reciprocal.",21],[10,"floor","","Rounds towards minus infinity.",21],[10,"ceil","","Rounds towards plus infinity.",21],[10,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",21],[10,"trunc","","Rounds towards zero.",21],[10,"fract","","Returns the fractional part of a number.",21],[10,"from_float","","Converts a float into a rational number.",21],[10,"eq","","",21],[10,"ne","","",21],[10,"lt","","",21],[10,"gt","","",21],[10,"le","","",21],[10,"ge","","",21],[10,"partial_cmp","","",21],[10,"cmp","","",21],[4,"Output","",""],[10,"mul","","",21],[4,"Output","",""],[4,"Output","",""],[10,"mul","","",21],[4,"Output","",""],[4,"Output","",""],[10,"div","","",21],[4,"Output","",""],[4,"Output","",""],[10,"div","","",21],[4,"Output","",""],[4,"Output","",""],[10,"add","","",21],[4,"Output","",""],[4,"Output","",""],[10,"add","","",21],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",21],[4,"Output","",""],[4,"Output","",""],[10,"sub","","",21],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",21],[4,"Output","",""],[4,"Output","",""],[10,"rem","","",21],[4,"Output","",""],[4,"Output","",""],[10,"neg","","",21],[4,"Output","",""],[10,"zero","","",21],[10,"is_zero","","",21],[10,"one","","",21],[10,"abs","","",21],[10,"abs_sub","","",21],[10,"signum","","",21],[10,"is_positive","","",21],[10,"is_negative","","",21],[10,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",21],[10,"from_str","","Parses `numer/denom` or just `numer`.",21],[10,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",21]],"paths":[[2,"Sign"],[6,"ToBigUint"],[6,"ToBigInt"],[6,"RandBigInt"],[1,"BigUint"],[1,"BigInt"],[1,"Complex"],[6,"Integer"],[1,"Range"],[1,"RangeInclusive"],[1,"RangeStep"],[1,"RangeStepInclusive"],[6,"Zero"],[6,"One"],[6,"Signed"],[6,"Bounded"],[6,"Saturating"],[6,"CheckedAdd"],[6,"CheckedSub"],[6,"CheckedMul"],[6,"CheckedDiv"],[1,"Ratio"]]};

searchIndex['rustc-serialize'] = {"items":[[0,"","rustc-serialize","Support code for encoding and decoding types."],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[10,"encode","collections::dlist","",10],[10,"decode","","",10],[10,"encode","collections::ring_buf","",11],[10,"decode","","",11],[10,"encode","collections::btree::map","",12],[10,"decode","","",12],[10,"encode","collections::btree::set","",13],[10,"decode","","",13],[10,"encode","std::collections::hash::map","",14],[10,"decode","","",14],[10,"encode","std::collections::hash::set","",15],[10,"decode","","",15],[10,"encode","collections::vec_map","",16],[10,"decode","","",16],[0,"base64","rustc-serialize","Base64 binary-to-text encoding"],[1,"Config","rustc-serialize::base64","Contains configuration parameters for `to_base64`."],[11,"char_set","","Character set to use",17],[11,"newline","","Newline to use",17],[11,"pad","","True to pad output with `=` characters",17],[11,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",17],[2,"CharacterSet","","Available encoding character sets"],[12,"Standard","","The standard character set (uses `+` and `/`)",18],[12,"UrlSafe","","The URL safe character set (uses `-` and `_`)",18],[2,"Newline","","Available newline types"],[12,"LF","","A linefeed (i.e. Unix-style newline)",19],[12,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",19],[2,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string"],[12,"InvalidBase64Byte","","The input contained a character not part of the base64 format",20],[12,"InvalidBase64Length","","The input had an invalid length",20],[5,"STANDARD","","Configuration for RFC 4648 standard base64 encoding"],[5,"URL_SAFE","","Configuration for RFC 4648 base64url encoding"],[5,"MIME","","Configuration for RFC 2045 MIME base64 encoding"],[6,"ToBase64","","A trait for converting a value to base64 encoding."],[9,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",21],[6,"FromBase64","","A trait for converting from base64 encoded values."],[9,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",22],[10,"fmt","","",20],[10,"description","","",20],[10,"detail","","",20],[0,"hex","rustc-serialize","Hex binary-to-text encoding"],[2,"FromHexError","rustc-serialize::hex","Errors that can occur when decoding a hex encoded string"],[12,"InvalidHexCharacter","","The input contained a character not part of the hex format",23],[12,"InvalidHexLength","","The input had an invalid length",23],[6,"ToHex","","A trait for converting a value to hexadecimal encoding"],[9,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",24],[6,"FromHex","","A trait for converting hexadecimal encoded values"],[9,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",25],[10,"fmt","","",23],[10,"description","","",23],[10,"detail","","",23],[0,"json","rustc-serialize","JSON parsing and serialization"],[1,"PrettyJson","rustc-serialize::json",""],[1,"AsJson","",""],[1,"AsPrettyJson","",""],[1,"Encoder","","A structure for implementing serialization to JSON."],[1,"PrettyEncoder","","Another encoder for JSON, but prints out human-readable JSON instead of\ncompact data"],[1,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x"],[1,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char."],[1,"Builder","","A Builder consumes a json::Parser to create a generic Json structure."],[1,"Decoder","","A structure to decode JSON to values in rust."],[2,"Json","","Represents a json value"],[12,"I64","","",26],[12,"U64","","",26],[12,"F64","","",26],[12,"String","","",26],[12,"Boolean","","",26],[12,"Array","","",26],[12,"Object","","",26],[12,"Null","","",26],[2,"ErrorCode","","The errors that can arise while parsing a JSON stream."],[12,"InvalidSyntax","","",27],[12,"InvalidNumber","","",27],[12,"EOFWhileParsingObject","","",27],[12,"EOFWhileParsingArray","","",27],[12,"EOFWhileParsingValue","","",27],[12,"EOFWhileParsingString","","",27],[12,"KeyMustBeAString","","",27],[12,"ExpectedColon","","",27],[12,"TrailingCharacters","","",27],[12,"TrailingComma","","",27],[12,"InvalidEscape","","",27],[12,"InvalidUnicodeCodePoint","","",27],[12,"LoneLeadingSurrogateInHexEscape","","",27],[12,"UnexpectedEndOfHexEscape","","",27],[12,"UnrecognizedHex","","",27],[12,"NotFourDigit","","",27],[12,"NotUtf8","","",27],[2,"ParserError","",""],[12,"SyntaxError","","msg, line, col",28],[12,"IoError","","",28],[2,"DecoderError","",""],[12,"ParseError","","",29],[12,"ExpectedError","","",29],[12,"MissingFieldError","","",29],[12,"UnknownVariantError","","",29],[12,"ApplicationError","","",29],[2,"JsonEvent","","The output of the streaming parser."],[12,"ObjectStart","","",30],[12,"ObjectEnd","","",30],[12,"ArrayStart","","",30],[12,"ArrayEnd","","",30],[12,"BooleanValue","","",30],[12,"I64Value","","",30],[12,"U64Value","","",30],[12,"F64Value","","",30],[12,"StringValue","","",30],[12,"NullValue","","",30],[12,"Error","","",30],[2,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x"],[12,"Index","","",31],[12,"Key","","",31],[3,"error_str","","Returns a readable error string for a given error code."],[3,"decode","","Shortcut function to decode a JSON `&str` into an object"],[3,"encode","","Shortcut function to encode a `T` into a JSON `String`"],[3,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[3,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`"],[4,"Array","",""],[4,"Object","",""],[4,"BuilderError","",""],[4,"EncodeResult","",""],[4,"DecodeResult","",""],[6,"ToJson","","A trait for converting values to JSON"],[9,"to_json","","Converts the value of `self` to an instance of JSON",32],[10,"partial_cmp","","",26],[10,"lt","","",26],[10,"le","","",26],[10,"gt","","",26],[10,"ge","","",26],[10,"eq","","",26],[10,"ne","","",26],[10,"clone","","",26],[10,"eq","","",27],[10,"ne","","",27],[10,"clone","","",27],[10,"fmt","","",28],[10,"eq","","",28],[10,"ne","","",28],[10,"clone","","",28],[10,"fmt","","",29],[10,"eq","","",29],[10,"ne","","",29],[10,"clone","","",29],[10,"fmt","","",27],[10,"description","","",29],[10,"detail","","",29],[10,"new","","Creates a new JSON encoder whose output will be written to the writer\nspecified.",33],[4,"Error","",""],[10,"emit_nil","","",33],[10,"emit_uint","","",33],[10,"emit_u64","","",33],[10,"emit_u32","","",33],[10,"emit_u16","","",33],[10,"emit_u8","","",33],[10,"emit_int","","",33],[10,"emit_i64","","",33],[10,"emit_i32","","",33],[10,"emit_i16","","",33],[10,"emit_i8","","",33],[10,"emit_bool","","",33],[10,"emit_f64","","",33],[10,"emit_f32","","",33],[10,"emit_char","","",33],[10,"emit_str","","",33],[10,"emit_enum","","",33],[10,"emit_enum_variant","","",33],[10,"emit_enum_variant_arg","","",33],[10,"emit_enum_struct_variant","","",33],[10,"emit_enum_struct_variant_field","","",33],[10,"emit_struct","","",33],[10,"emit_struct_field","","",33],[10,"emit_tuple","","",33],[10,"emit_tuple_arg","","",33],[10,"emit_tuple_struct","","",33],[10,"emit_tuple_struct_arg","","",33],[10,"emit_option","","",33],[10,"emit_option_none","","",33],[10,"emit_option_some","","",33],[10,"emit_seq","","",33],[10,"emit_seq_elt","","",33],[10,"emit_map","","",33],[10,"emit_map_elt_key","","",33],[10,"emit_map_elt_val","","",33],[10,"new","","Creates a new encoder whose output will be written to the specified writer",34],[10,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",34],[4,"Error","",""],[10,"emit_nil","","",34],[10,"emit_uint","","",34],[10,"emit_u64","","",34],[10,"emit_u32","","",34],[10,"emit_u16","","",34],[10,"emit_u8","","",34],[10,"emit_int","","",34],[10,"emit_i64","","",34],[10,"emit_i32","","",34],[10,"emit_i16","","",34],[10,"emit_i8","","",34],[10,"emit_bool","","",34],[10,"emit_f64","","",34],[10,"emit_f32","","",34],[10,"emit_char","","",34],[10,"emit_str","","",34],[10,"emit_enum","","",34],[10,"emit_enum_variant","","",34],[10,"emit_enum_variant_arg","","",34],[10,"emit_enum_struct_variant","","",34],[10,"emit_enum_struct_variant_field","","",34],[10,"emit_struct","","",34],[10,"emit_struct_field","","",34],[10,"emit_tuple","","",34],[10,"emit_tuple_arg","","",34],[10,"emit_tuple_struct","","",34],[10,"emit_tuple_struct_arg","","",34],[10,"emit_option","","",34],[10,"emit_option_none","","",34],[10,"emit_option_some","","",34],[10,"emit_seq","","",34],[10,"emit_seq_elt","","",34],[10,"emit_map","","",34],[10,"emit_map_elt_key","","",34],[10,"emit_map_elt_val","","",34],[10,"encode","","",26],[10,"from_reader","","Decodes a json value from an `&mut io::Reader`",26],[10,"from_str","","Decodes a json value from a string",26],[10,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Show`.",26],[10,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",26],[10,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",26],[10,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",26],[10,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",26],[10,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",26],[10,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",26],[10,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",26],[10,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",26],[10,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",26],[10,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",26],[10,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",26],[10,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",26],[10,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",26],[10,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",26],[10,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",26],[10,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",26],[10,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",26],[10,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",26],[10,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",26],[10,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",26],[4,"Output","",""],[10,"index","","",26],[4,"Output","",""],[10,"index","","",26],[10,"fmt","","",30],[10,"clone","","",30],[10,"eq","","",30],[10,"ne","","",30],[10,"fmt","","",31],[10,"clone","","",31],[10,"eq","","",31],[10,"ne","","",31],[10,"new","","",35],[10,"len","","Returns The number of elements in the Stack.",35],[10,"is_empty","","Returns true if the stack is empty.",35],[10,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",35],[10,"is_equal_to","","Compares this stack with an array of StackElements.",35],[10,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",35],[10,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",35],[10,"top","","Returns the top-most element (if any).",35],[4,"Item","",""],[10,"next","","",36],[10,"new","","Creates the JSON parser.",36],[10,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",36],[10,"new","","Create a JSON Builder.",37],[10,"build","","",37],[10,"new","","Creates a new decoder instance for decoding the specified JSON value.",38],[4,"Error","",""],[10,"read_nil","","",38],[10,"read_uint","","",38],[10,"read_u8","","",38],[10,"read_u16","","",38],[10,"read_u32","","",38],[10,"read_u64","","",38],[10,"read_int","","",38],[10,"read_i8","","",38],[10,"read_i16","","",38],[10,"read_i32","","",38],[10,"read_i64","","",38],[10,"read_f32","","",38],[10,"read_f64","","",38],[10,"read_bool","","",38],[10,"read_char","","",38],[10,"read_str","","",38],[10,"read_enum","","",38],[10,"read_enum_variant","","",38],[10,"read_enum_variant_arg","","",38],[10,"read_enum_struct_variant","","",38],[10,"read_enum_struct_variant_field","","",38],[10,"read_struct","","",38],[10,"read_struct_field","","",38],[10,"read_tuple","","",38],[10,"read_tuple_arg","","",38],[10,"read_tuple_struct","","",38],[10,"read_tuple_struct_arg","","",38],[10,"read_option","","",38],[10,"read_seq","","",38],[10,"read_seq_elt","","",38],[10,"read_map","","",38],[10,"read_map_elt_key","","",38],[10,"read_map_elt_val","","",38],[10,"error","","",38],[10,"to_json","","",26],[10,"to_json","collections::string","",0],[10,"to_json","collections::vec","",3],[10,"to_json","collections::btree::map","",12],[10,"to_json","std::collections::hash::map","",14],[10,"to_json","core::option","",4],[10,"fmt","rustc-serialize::json","Encodes a json value into a string",26],[10,"fmt","","Encodes a json value into a string",39],[10,"fmt","","Encodes a json value into a string",40],[10,"indent","","Set the indentation level for the emitted JSON",41],[10,"fmt","","Encodes a json value into a string",41],[10,"from_str","","",26],[10,"encode","collections::string","",0],[10,"decode","","",0],[10,"encode","alloc::boxed","",1],[10,"decode","","",1],[10,"decode","","",1],[10,"encode","alloc::rc","",2],[10,"decode","","",2],[10,"encode","collections::vec","",3],[10,"decode","","",3],[10,"encode","core::option","",4],[10,"decode","","",4],[10,"encode","std::path::posix","",5],[10,"decode","","",5],[10,"encode","std::path::windows","",6],[10,"decode","","",6],[10,"encode","core::cell","",7],[10,"decode","","",7],[10,"encode","","",8],[10,"decode","","",8],[10,"encode","alloc::arc","",9],[10,"decode","","",9],[6,"Decoder","rustc-serialize",""],[17,"Error","rustc-serialize::Decoder",""],[9,"read_nil","rustc-serialize","",42],[9,"read_uint","","",42],[9,"read_u64","","",42],[9,"read_u32","","",42],[9,"read_u16","","",42],[9,"read_u8","","",42],[9,"read_int","","",42],[9,"read_i64","","",42],[9,"read_i32","","",42],[9,"read_i16","","",42],[9,"read_i8","","",42],[9,"read_bool","","",42],[9,"read_f64","","",42],[9,"read_f32","","",42],[9,"read_char","","",42],[9,"read_str","","",42],[9,"read_enum","","",42],[9,"read_enum_variant","","",42],[9,"read_enum_variant_arg","","",42],[9,"read_enum_struct_variant","","",42],[9,"read_enum_struct_variant_field","","",42],[9,"read_struct","","",42],[9,"read_struct_field","","",42],[9,"read_tuple","","",42],[9,"read_tuple_arg","","",42],[9,"read_tuple_struct","","",42],[9,"read_tuple_struct_arg","","",42],[9,"read_option","","",42],[9,"read_seq","","",42],[9,"read_seq_elt","","",42],[9,"read_map","","",42],[9,"read_map_elt_key","","",42],[9,"read_map_elt_val","","",42],[9,"error","","",42],[6,"Encoder","",""],[17,"Error","rustc-serialize::Encoder",""],[9,"emit_nil","rustc-serialize","",43],[9,"emit_uint","","",43],[9,"emit_u64","","",43],[9,"emit_u32","","",43],[9,"emit_u16","","",43],[9,"emit_u8","","",43],[9,"emit_int","","",43],[9,"emit_i64","","",43],[9,"emit_i32","","",43],[9,"emit_i16","","",43],[9,"emit_i8","","",43],[9,"emit_bool","","",43],[9,"emit_f64","","",43],[9,"emit_f32","","",43],[9,"emit_char","","",43],[9,"emit_str","","",43],[9,"emit_enum","","",43],[9,"emit_enum_variant","","",43],[9,"emit_enum_variant_arg","","",43],[9,"emit_enum_struct_variant","","",43],[9,"emit_enum_struct_variant_field","","",43],[9,"emit_struct","","",43],[9,"emit_struct_field","","",43],[9,"emit_tuple","","",43],[9,"emit_tuple_arg","","",43],[9,"emit_tuple_struct","","",43],[9,"emit_tuple_struct_arg","","",43],[9,"emit_option","","",43],[9,"emit_option_none","","",43],[9,"emit_option_some","","",43],[9,"emit_seq","","",43],[9,"emit_seq_elt","","",43],[9,"emit_map","","",43],[9,"emit_map_elt_key","","",43],[9,"emit_map_elt_val","","",43],[6,"Decodable","",""],[9,"decode","","",44],[6,"Encodable","",""],[9,"encode","","",45],[6,"DecoderHelpers","",""],[9,"read_to_vec","","",46],[6,"EncoderHelpers","",""],[9,"emit_from_vec","","",47]],"paths":[[1,"String"],[1,"Box"],[1,"Rc"],[1,"Vec"],[2,"Option"],[1,"Path"],[1,"Path"],[1,"Cell"],[1,"RefCell"],[1,"Arc"],[1,"DList"],[1,"RingBuf"],[1,"BTreeMap"],[1,"BTreeSet"],[1,"HashMap"],[1,"HashSet"],[1,"VecMap"],[1,"Config"],[2,"CharacterSet"],[2,"Newline"],[2,"FromBase64Error"],[6,"ToBase64"],[6,"FromBase64"],[2,"FromHexError"],[6,"ToHex"],[6,"FromHex"],[2,"Json"],[2,"ErrorCode"],[2,"ParserError"],[2,"DecoderError"],[2,"JsonEvent"],[2,"StackElement"],[6,"ToJson"],[1,"Encoder"],[1,"PrettyEncoder"],[1,"Stack"],[1,"Parser"],[1,"Builder"],[1,"Decoder"],[1,"PrettyJson"],[1,"AsJson"],[1,"AsPrettyJson"],[6,"Decoder"],[6,"Encoder"],[6,"Decodable"],[6,"Encodable"],[6,"DecoderHelpers"],[6,"EncoderHelpers"]]};

initSearch(searchIndex);
